{"version":3,"sources":["GuestInputForm.js","Header.js","ConfirmedFilter.js","Counter.js","GuestName.js","Guest.js","PendingGuest.js","GuestList.js","MainContent.js","App.js","serviceWorker.js","index.js"],"names":["GuestInputForm","props","react_default","a","createElement","onSubmit","submitGuest","type","onChange","nameInput","value","pendingGuest","placeholder","name","Header","title","description","src_GuestInputForm","defaultProps","ConfirmedFilter","toggleFilter","checked","isFiltered","Counter","className","numberAttending","numberUnconfirmed","totalInvited","GuestName","isEditing","children","handleNameEdits","Guest","src_GuestName","event","setName","target","isConfirmed","handleConfirmation","onClick","handleToggleEditing","handleRemoveGuest","PendingGuest","GuestList","src_PendingGuest","guests","filter","guest","map","src_Guest","key","id","toggleConfirmation","toggleEditing","removeGuest","text","MainContent","src_ConfirmedFilter","src_Counter","src_GuestList","App","state","lastGuestId","getNewGuestId","_this","toggleGuestProperty","property","setState","Object","objectSpread","defineProperty","handleNameInput","newGuestSubmitHandler","preventDefault","guestId","concat","toConsumableArray","getTotalInvited","length","getAttendingGuests","reduce","total","this","src_Header","src_MainContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6fd94a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GuestInputForm = (props) =>\r\n    <form onSubmit={ props.submitGuest }>\r\n        <input\r\n            type=\"text\"\r\n            onChange={ props.nameInput }\r\n            value={ props.pendingGuest }\r\n            placeholder=\"Invite Someone\"\r\n        />\r\n        <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\r\n    </form>;\r\n\r\nGuestInputForm.propTypes = {\r\n    submitGuest: PropTypes.func.isRequired,\r\n    nameInput: PropTypes.func.isRequired,\r\n    pendingGuest: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GuestInputForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GuestInputForm from './GuestInputForm';\r\n\r\nconst Header = (props) =>\r\n    <header>\r\n        <h1>{ props.title }</h1>\r\n        <p>{ props.description }</p>\r\n        <GuestInputForm\r\n            submitGuest={ props.submitGuest }\r\n            nameInput={ props.nameInput }\r\n            pendingGuest={ props.pendingGuest }\r\n        />\r\n    </header>;\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    submitGuest: PropTypes.func.isRequired,\r\n    nameInput: PropTypes.func.isRequired,\r\n    pendingGuest: PropTypes.string.isRequired\r\n};\r\n\r\nHeader.defaultProps = {\r\n    title: 'RSVP',\r\n    description: 'A Treehouse App'\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ConfirmedFilter = (props) =>\r\n    <div>\r\n        <h2>Invitees</h2>\r\n        <label>\r\n            <input\r\n                type=\"checkbox\"\r\n                onChange={ props.toggleFilter }\r\n                checked={ props.isFiltered } /> Hide those who haven't responded\r\n        </label>\r\n    </div>;\r\n\r\nConfirmedFilter.propTypes = {\r\n    toggleFilter: PropTypes.func.isRequired,\r\n    isFiltered: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default ConfirmedFilter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Counter = (props) =>\r\n    <table className=\"counter\">\r\n        <tbody>\r\n            <tr>\r\n                <td>Attending:</td>\r\n                <td>{ props.numberAttending }</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Unconfirmed:</td>\r\n                <td>{ props.numberUnconfirmed }</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Total:</td>\r\n                <td>{ props.totalInvited }</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>;\r\n\r\nCounter.propTypes = {\r\n    numberAttending: PropTypes.number,\r\n    numberUnconfirmed: PropTypes.number,\r\n    totalInvited: PropTypes.number\r\n};\r\n\r\nexport default Counter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GuestName = (props) => {\r\n    if (props.isEditing) {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                value={ props.children }\r\n                onChange={ props.handleNameEdits }\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <span>{ props.children }</span>\r\n    );\r\n};\r\n\r\nGuestName.propTypes = {\r\n    isEditing: PropTypes.bool.isRequired,\r\n    handleNameEdits: PropTypes.func.isRequired\r\n};\r\n\r\nexport default GuestName;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport GuestName from './GuestName';\r\n\r\nconst Guest = (props) =>\r\n    <li>\r\n        <GuestName\r\n            isEditing={ props.isEditing }\r\n            handleNameEdits={ event => props.setName(event.target.value) }>\r\n            { props.name }\r\n        </GuestName>\r\n        <label>\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={ props.isConfirmed }\r\n                onChange={ props.handleConfirmation } /> Confirmed\r\n        </label>\r\n        <button onClick={ props.handleToggleEditing }>\r\n            { props.isEditing ? 'save' : 'edit' }\r\n        </button>\r\n        <button onClick={ props.handleRemoveGuest }>remove</button>\r\n    </li>;\r\n\r\nGuest.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    isConfirmed: PropTypes.bool.isRequired,\r\n    isEditing: PropTypes.bool.isRequired,\r\n    handleConfirmation: PropTypes.func.isRequired,\r\n    handleToggleEditing: PropTypes.func.isRequired,\r\n    handleRemoveGuest: PropTypes.func.isRequired,\r\n    setName: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Guest;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PendingGuest = (props) => {\r\n    if (props.name) {\r\n        return (\r\n            <li className=\"pending\">\r\n                <span>\r\n                    { props.name }\r\n                </span>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nPendingGuest.propTypes = {\r\n    name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PendingGuest;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Guest from './Guest';\r\nimport PendingGuest from './PendingGuest';\r\n\r\nconst GuestList = (props) =>\r\n    <ul>\r\n        <PendingGuest name={ props.pendingGuest } />\r\n        {props.guests\r\n        .filter(guest => !props.isFiltered || guest.isConfirmed)\r\n        .map(guest =>\r\n            <Guest\r\n                key={ guest.id }\r\n                name={ guest.name }\r\n                isConfirmed={ guest.isConfirmed }\r\n                isEditing={ guest.isEditing }\r\n                handleConfirmation={ () => props.toggleConfirmation(guest.id) }\r\n                handleToggleEditing={ () => props.toggleEditing(guest.id) }\r\n                handleRemoveGuest={ () => props.removeGuest(guest.id) }\r\n                setName={ text => props.setName(text, guest.id) }\r\n            />\r\n        )}\r\n    </ul>;\r\n\r\nGuestList.propTypes = {\r\n    guests: PropTypes.array.isRequired,\r\n    toggleConfirmation: PropTypes.func.isRequired,\r\n    toggleEditing: PropTypes.func.isRequired,\r\n    removeGuest: PropTypes.func.isRequired,\r\n    setName: PropTypes.func.isRequired,\r\n    isFiltered: PropTypes.bool.isRequired,\r\n    pendingGuest: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GuestList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ConfirmedFilter from './ConfirmedFilter';\r\nimport Counter from './Counter';\r\nimport GuestList from './GuestList';\r\n\r\nconst MainContent = (props) =>\r\n    <div className=\"main\">\r\n        <ConfirmedFilter\r\n            toggleFilter={ props.toggleFilter }\r\n            isFiltered={ props.isFiltered }\r\n        />\r\n\r\n        <Counter\r\n            numberAttending={ props.numberAttending }\r\n            numberUnconfirmed={ props.numberUnconfirmed }\r\n            totalInvited={ props.totalInvited }\r\n        />\r\n\r\n        <GuestList\r\n            guests={ props.guests }\r\n            toggleConfirmation={ props.toggleConfirmation }\r\n            toggleEditing={ props.toggleEditing }\r\n            removeGuest={ props.removeGuest }\r\n            setName={ props.setName }\r\n            isFiltered={ props.isFiltered }\r\n            pendingGuest={ props.pendingGuest }\r\n        />\r\n    </div>;\r\n\r\nMainContent.propTypes = {\r\n    toggleFilter: PropTypes.func.isRequired,\r\n    isFiltered: PropTypes.bool.isRequired,\r\n    numberAttending: PropTypes.number.isRequired,\r\n    numberUnconfirmed: PropTypes.number.isRequired,\r\n    totalInvited: PropTypes.number.isRequired,\r\n    guests: PropTypes.array.isRequired,\r\n    toggleConfirmation: PropTypes.func.isRequired,\r\n    toggleEditing: PropTypes.func.isRequired,\r\n    removeGuest: PropTypes.func.isRequired,\r\n    setName: PropTypes.func.isRequired,\r\n    pendingGuest: PropTypes.string.isRequired\r\n};\r\n\r\nexport default MainContent;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport MainContent from './MainContent';\n\nclass App extends Component {\n\n    state = {\n        isFiltered: false,\n        pendingGuest: '',\n        guests: []\n    }\n\n    lastGuestId = 0;\n\n    getNewGuestId = () => {\n        const id = this.lastGuestId;\n        this.lastGuestId++;\n        return id;\n    }\n\n    toggleGuestProperty = (property, id) =>\n        this.setState({\n            guests: this.state.guests.map(guest => {\n                if (guest.id === id) {\n                    return {\n                        ...guest,\n                        [property]: !guest[property]\n                    };\n                }\n\n                return guest;\n            })\n        });\n\n    setName = (name, id) =>\n        this.setState({\n            guests: this.state.guests.map(guest => {\n                if (guest.id === id) {\n                    return {\n                        ...guest,\n                        name\n                    };\n                }\n\n                return guest;\n            })\n        });\n\n    toggleConfirmation = (id) =>\n        this.toggleGuestProperty('isConfirmed', id);\n\n    toggleEditing = (id) =>\n        this.toggleGuestProperty('isEditing', id);\n\n    removeGuest = (id) =>\n        this.setState({\n            guests: this.state.guests.filter(guest => guest.id !== id)\n        });\n\n    toggleFilter = () =>\n        this.setState({\n            isFiltered: !this.state.isFiltered\n        });\n\n    handleNameInput = (event) =>\n        this.setState({\n            pendingGuest: event.target.value\n        });\n\n    newGuestSubmitHandler = (event) => {\n        event.preventDefault();\n        const guestId = this.getNewGuestId();\n        this.setState({\n            guests: [\n                {\n                    name: this.state.pendingGuest,\n                    isConfirmed: false,\n                    isEditing: false,\n                    id: guestId\n                },\n                ...this.state.guests\n            ],\n            pendingGuest: ''\n        });\n    }\n\n    getTotalInvited = () => this.state.guests.length;\n\n    getAttendingGuests = () =>\n        this.state.guests.reduce(\n            (total, guest) => guest.isConfirmed ? total + 1 : total,\n            0\n        );\n\n    render() {\n        const totalInvited = this.getTotalInvited();\n        const numberAttending = this.getAttendingGuests();\n        const numberUnconfirmed = totalInvited - numberAttending;\n\n        return (\n            <div className=\"App\">\n                <Header\n                    submitGuest={ this.newGuestSubmitHandler }\n                    nameInput={ this.handleNameInput }\n                    pendingGuest={ this.state.pendingGuest }\n                />\n\n                <MainContent\n                    toggleFilter={ this.toggleFilter }\n                    isFiltered={ this.state.isFiltered }\n                    numberAttending={ numberAttending }\n                    numberUnconfirmed={ numberUnconfirmed }\n                    totalInvited={ totalInvited }\n                    guests={ this.state.guests }\n                    toggleConfirmation={ this.toggleConfirmation }\n                    toggleEditing={ this.toggleEditing }\n                    removeGuest={ this.removeGuest }\n                    setName={ this.setName }\n                    pendingGuest={ this.state.pendingGuest }\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}